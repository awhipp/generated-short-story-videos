from perlin_noise import PerlinNoise
import matplotlib.pyplot as plt
import random
import json
from moviepy.editor import AudioFileClip, ImageClip
from gtts import gTTS
from PIL import Image, ImageDraw, ImageFont
from Google import Create_Service
from dotenv import load_dotenv
from googleapiclient.http import MediaFileUpload
import time
import os

load_dotenv()

client_id = os.environ['CLIENT_ID']
client_secret = os.environ['CLIENT_SECRET']

with open('temp_credentials.json') as f:
    newText=f.read().replace('<CLIENT_ID>', client_id).replace('<CLIENT_SECRET>', client_secret)

with open('credentials.json', "w") as f:
    f.write(newText)

##
# Configuration
##

octaves = random.randint(1,25)
seed = random.randint(1,1000)

cmaps = [
    'viridis', 'plasma', 'inferno', 'magma', 'cividis',
    'Greys', 'Purples', 'Blues', 'Greens', 'Oranges', 'Reds', 'YlOrBr', 'YlOrRd', 'OrRd', 'PuRd', 'RdPu', 'BuPu',
    'GnBu', 'PuBu', 'YlGnBu', 'PuBuGn', 'BuGn', 'YlGn',
    'binary', 'gist_yarg', 'gist_gray', 'gray', 'bone', 'pink',
    'spring', 'summer', 'autumn', 'winter', 'cool', 'Wistia',
    'hot', 'afmhot', 'gist_heat', 'copper',
    'PiYG', 'PRGn', 'BrBG', 'PuOr', 'RdGy', 'RdBu',
    'RdYlBu', 'RdYlGn', 'Spectral', 'coolwarm', 'bwr', 'seismic', 
    'twilight', 'twilight_shifted', 'hsv',
    'Pastel1', 'Pastel2', 'Paired', 'Accent',
    'Dark2', 'Set1', 'Set2', 'Set3',
    'tab10', 'tab20', 'tab20b', 'tab20c',
    'flag', 'prism', 'ocean', 'gist_earth', 'terrain', 'gist_stern',
    'gnuplot', 'gnuplot2', 'CMRmap', 'cubehelix', 'brg',
    'gist_rainbow', 'rainbow', 'jet', 'turbo', 'nipy_spectral'
    'gist_ncar'
]

cmap = random.choice(cmaps)
debugging = False
upload = True

print("""
Configuration:
--Octaves=%s
--Seed=%s
--CMAP=%s
--Debug Enabled=%s
""" % (octaves, seed, cmap, debugging))

def generate_background(octaves, seed):
    print('Generating Background...')
    noise = PerlinNoise(octaves=octaves, seed=seed)
    xpix, ypix, dpi = 1920, 1080, 1200
    pic = [[noise([i/xpix, j/ypix]) for j in range(xpix)] for i in range(ypix)]

    plt.figure(figsize=(xpix/dpi, ypix/dpi), dpi=dpi)
    plt.imshow(pic, cmap=cmap)
    plt.gca().set_axis_off()
    plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0, hspace = 0, wspace = 0)
    plt.margins(0,0)
    plt.gca().xaxis.set_major_locator(plt.NullLocator())
    plt.gca().yaxis.set_major_locator(plt.NullLocator())
    plt.savefig('image.png', bbox_inches = 'tight', pad_inches = 0)

    if debugging:
        plt.show()

def get_story():
    print('Getting Story...')

    stories = ''
    with open('stories.json') as f:
        stories = json.load(f)

    story_idx = random.randint(0,145)
    story = stories[story_idx]

    title = story['title']
    author = story['author']
    text = story['story']
    moral = story['moral']

    return title, author, '%s by %s. %s. Moral of the story: %s' % (title, author, text, moral)

def generate_audio(text):
    print('Generating Audio...')

    language = 'en'
    sound = gTTS(text=text, lang=language, slow=False)
    sound.save('audio.mp3')

    if debugging:
        from playsound import playsound
        playsound('audio.mp3')

def update_title_card(title, author):
    print('Generating Title Card...')
    image = Image.open('image.png')
    new_image = image.resize((1920, 1080))
    draw = ImageDraw.Draw(new_image)
    font = ImageFont.truetype("arial.ttf", 100)
    w, h = font.getsize(title)
    draw.text(((1920-w)/2,(1080-h)/2), title, font=font, fill="white", stroke_width=5, stroke_fill='black')
    font = ImageFont.truetype("arial.ttf", 70)
    draw.text(((1920-w)/2,((1080-h)/2) + 90), author, font=font, fill="white", stroke_width=5, stroke_fill='black')
    new_image.save('image.png')

def generate_mp4():
    print('Generating MP4...')
    audio = AudioFileClip('audio.mp3')
    clip = ImageClip("image.png").set_duration(audio.duration)
    clip = clip.set_audio(audio)
    clip.write_videofile("output.mp4", fps=12)

def upload_video(title, author):
    print('Uploading to YouTube...')
    
    CLIENT_SECRET_FILE = 'credentials.json'
    API_NAME = 'youtube'
    API_VERSION = 'v3'
    SCOPES = ['https://www.googleapis.com/auth/youtube.upload']

    service = Create_Service(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)

    request_body = {
        'snippet': {
            'categoryI': 19,
            'title': '%s - %s' % (title, author),
            'description': 'Programatic and Autogenerated Video with Short Story',
            'tags': ['Short Story']
        },
        'status': {
            'privacyStatus': 'public',
            'selfDeclaredMadeForKids': True, 
        },
        'notifySubscribers': False
    }

    mediaFile = MediaFileUpload('output.mp4')

    response_upload = service.videos().insert(
        part='snippet,status',
        body=request_body,
        media_body=mediaFile
    ).execute()

    service.thumbnails().set(
        videoId=response_upload.get('id'),
        media_body=MediaFileUpload('image.png')
    ).execute()


if __name__ == '__main__':
    start = time.time()

    generate_background(octaves, seed)
    print('Time Elapsed: %s seconds' % str(time.time() - start))

    title, author, story = get_story()
    print('Time Elapsed: %s seconds' % str(time.time() - start))

    generate_audio(story)
    print('Time Elapsed: %s seconds' % str(time.time() - start))
    
    update_title_card(title, author)
    print('Time Elapsed: %s seconds' % str(time.time() - start))

    generate_mp4()
    print('Time Elapsed: %s seconds' % str(time.time() - start))

    if upload:
        upload_video(title, author)
        print('Time Elapsed: %s seconds' % str(time.time() - start))
